// ignore_for_file: unreachable_from_main
import 'dart:io';
import 'dart:math';

import 'package:grinder/grinder.dart';
import 'package:path/path.dart';
import 'package:yaml/yaml.dart';
import 'package:yaml_edit/yaml_edit.dart';

import 'model/melos_package.dart';
import 'utils/constants.dart';
import 'utils/label.dart';
import 'utils/melos.dart';
import 'utils/path.dart';

/**
 * `.github/labels.yml` のパッケージ部分を生成する
 */
void runGeneratePackageLabels() {
  final rootDir = fetchGitRootDirPath();
  log('rootDir: $rootDir');

  final labelsFile = File(join(rootDir, '.github', 'labels.yml'));
  if (!labelsFile.existsSync()) {
    fail(
      [
        'Required files not found.',
        'Create `.github/labels.yml` and run it again.',
      ].join('\n'),
    );
  } else {
    log('labelsFile: ${labelsFile.path}');
  }

  // 自動生成の区切り行を探す
  final labelsContentLines = labelsFile.readAsLinesSync();
  final autoGeneratedIndex = resolveAutoGeneratedIndex(
    contentLines: labelsContentLines,
  );

  // 自動生成より前のテキストのみ取得する
  final preGeneratedContent = labelsContentLines
      .sublist(
        0,
        autoGeneratedIndex,
      )
      .join('\n');

  // 自動生成部分を生成する
  final generatedContent = _generateLabelsContent(
    rootDir: rootDir,
    labelsContentLines: labelsContentLines,
    autoGeneratedIndex: autoGeneratedIndex,
    melosPackageList: fetchMelosPackageList(),
  );

  // コメント行を保持しつつ新しいYAML内容に置き換える
  final updateContent = [
    preGeneratedContent,
    autoGeneratedLabelComment,
    generatedContent,
    // NOTE: 末尾に改行を追加するために空文字を追加
    '',
  ].join('\n');

  labelsFile.writeAsStringSync(updateContent);

  log('Labels updated successfully.');
}

/**
 * パッケージ部分のラベルを生成する
 */
String _generateLabelsContent({
  required String rootDir,
  required List<String> labelsContentLines,
  required int autoGeneratedIndex,
  required List<MelosPackage> melosPackageList,
}) {
  // 既存の生成済みラベル部分の YAML を取得
  final existingGeneratedLabelsYaml = loadYaml(
    labelsContentLines.sublist(autoGeneratedIndex).join('\n'),
  ) as YamlList?;

  // Melos で管理しているパッケージを labels の要素として生成
  final generatedLineList = melosPackageList.generatePackageLabels(
    rootDir: rootDir,
    existingGeneratedLabelsYaml: existingGeneratedLabelsYaml,
  );

  // NOTE: 視認性向上のため YAML 要素間に改行を加える
  final formattedGenerateContentLines = <String>[];
  for (final line in generatedLineList) {
    if (line.startsWith('-') && formattedGenerateContentLines.isNotEmpty) {
      formattedGenerateContentLines.add('');
    }
    formattedGenerateContentLines.add(line.replaceAll(r'\/', '/'));
  }

  return formattedGenerateContentLines.join('\n');
}

/**
 * ランダムなカラーコードを生成
 */
String _generateRandomColor() {
  // ランダムなRGB値を生成
  final random = Random();
  final r = random.nextInt(256);
  final g = random.nextInt(256);
  final b = random.nextInt(256);

  // RGB値を16進数に変換してカラーコードを生成
  final colorCode = r.toRadixString(16).padLeft(2, '0') +
      g.toRadixString(16).padLeft(2, '0') +
      b.toRadixString(16).padLeft(2, '0');

  return colorCode;
}

extension on List<MelosPackage> {
  /**
   * labels 要素の一覧を生成する
   */
  List<String> generatePackageLabels({
    required String rootDir,
    required YamlList? existingGeneratedLabelsYaml,
  }) {
    final generatedLabels = <Map<String, String>>[];
    for (final package in this) {
      final packageName = package.location.replaceAll('$rootDir/', '');
      final labelName = '@$packageName';

      // 既存のラベル情報
      final existingLabel = existingGeneratedLabelsYaml?.firstWhere(
        (label) => (label as YamlMap)['name'] == labelName,
        orElse: () => null,
      );
      final existingColor = existingLabel?['color']?.toString();
      final existingDescription = existingLabel?['description']?.toString();
      final existingFromName = existingLabel?['from_name']?.toString();

      // https://github.com/crazy-max/ghaction-github-labeler?tab=readme-ov-file#yaml-configuration
      final newLabel = <String, String>{
        'name': labelName,
        'color': existingColor ?? _generateRandomColor(),
        'description': existingDescription ??
            '${packageName.replaceAll('/', ' ')} package',
        if (existingFromName != null) 'from_name': existingFromName,
      };

      generatedLabels.add(newLabel);
    }

    return (YamlEditor('')..update([], generatedLabels)).toString().split('\n');
  }
}
